<?xml version="1.0" encoding="UTF-8"?>
<!--
  Copyright (c) 2020, 2024 Oracle and/or its affiliates.
  Licensed under the Universal Permissive License v 1.0 as shown at
  https://oss.oracle.com/licenses/upl.
-->

<project xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns="http://maven.apache.org/POM/4.0.0"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <parent>
    <groupId>io.helidon.applications</groupId>
    <artifactId>helidon-mp</artifactId>
    <version>3.2.6</version>
    <relativePath/>
  </parent>

  <repositories>
    <repository>
      <id>central</id>
      <url>https://repo.maven.apache.org/maven2</url>
    </repository>
    <repository>
      <id>sonatype-snapshots</id>
      <url>https://oss.sonatype.org/content/repositories/snapshots</url>
      <releases>
        <enabled>false</enabled>
      </releases>
      <snapshots>
        <enabled>true</enabled>
      </snapshots>
    </repository>
    <repository>
      <id>sonatype-staging</id>
      <url>https://oss.sonatype.org/content/groups/staging/</url>
      <releases>
        <enabled>true</enabled>
      </releases>
      <snapshots>
        <enabled>false</enabled>
      </snapshots>
    </repository>
    <repository>
      <id>jcenter.bintray.com</id>
      <url>https://jcenter.bintray.com</url>
    </repository>
  </repositories>

  <pluginRepositories>
    <pluginRepository>
      <id>central</id>
      <url>https://repo.maven.apache.org/maven2</url>
    </pluginRepository>
    <pluginRepository>
      <id>sonatype-snapshots</id>
      <url>https://oss.sonatype.org/content/repositories/snapshots</url>
      <releases>
        <enabled>false</enabled>
      </releases>
      <snapshots>
        <enabled>true</enabled>
      </snapshots>
    </pluginRepository>
    <pluginRepository>
      <id>sonatype-staging</id>
      <url>https://oss.sonatype.org/content/groups/staging/</url>
      <releases>
        <enabled>true</enabled>
      </releases>
      <snapshots>
        <enabled>false</enabled>
      </snapshots>
    </pluginRepository>
    <pluginRepository>
      <id>jcenter.bintray.com</id>
      <url>https://jcenter.bintray.com</url>
    </pluginRepository>
  </pluginRepositories>

  <groupId>com.oracle.coherence.examples</groupId>
  <artifactId>todo-list-helidon-server</artifactId>
  <version>24.03</version>

  <properties>
    <coherence.groupId>com.oracle.coherence.ce</coherence.groupId>
    <coherence.version>${project.version}</coherence.version>
    <version.lib.hamcrest>2.2</version.lib.hamcrest>
    <version.lib.rest-assured>5.4.0</version.lib.rest-assured>
    <version.lib.jandex>3.1.6</version.lib.jandex>
    <version.lib.openapi>3.10.0</version.lib.openapi>
    <version.plugin.jandex>${version.lib.jandex}</version.plugin.jandex>
    <version.plugin.jib>3.4.1</version.plugin.jib>
    <frontend-maven-plugin.version>1.15.0</frontend-maven-plugin.version>
    <node.version>v14.17.6</node.version>
    <registry.url>https://registry.npmjs.org</registry.url>
  </properties>

  <dependencies>
    <!-- Helidon dependencies-->
    <dependency>
      <groupId>io.helidon.microprofile.bundles</groupId>
      <artifactId>helidon-microprofile</artifactId>
    </dependency>
    <dependency>
      <groupId>io.helidon.microprofile.graphql</groupId>
      <artifactId>helidon-microprofile-graphql-server</artifactId>
    </dependency>
    <dependency>
      <groupId>io.helidon.microprofile.grpc</groupId>
      <artifactId>helidon-microprofile-grpc-server</artifactId>
    </dependency>
    <dependency>
      <groupId>org.glassfish.jersey.media</groupId>
      <artifactId>jersey-media-json-binding</artifactId>
    </dependency>
    <dependency>
      <groupId>org.glassfish.jersey.media</groupId>
      <artifactId>jersey-media-sse</artifactId>
    </dependency>
    <dependency>
      <groupId>io.helidon.tracing</groupId>
      <artifactId>helidon-tracing-jaeger</artifactId>
    </dependency>
    <dependency>
      <groupId>io.grpc</groupId>
      <artifactId>grpc-services</artifactId>
      <version>${version.lib.grpc}</version>
    </dependency>

    <!-- Coherence dependencies -->
    <dependency>
      <groupId>${coherence.groupId}</groupId>
      <artifactId>coherence-cdi-server</artifactId>
      <version>${coherence.version}</version>
    </dependency>
    <dependency>
      <groupId>${coherence.groupId}</groupId>
      <artifactId>coherence-mp-config</artifactId>
      <version>${coherence.version}</version>
    </dependency>
    <dependency>
      <groupId>${coherence.groupId}</groupId>
      <artifactId>coherence-json</artifactId>
      <version>${coherence.version}</version>
    </dependency>

    <!-- jandex -->
    <dependency>
      <groupId>io.smallrye</groupId>
      <artifactId>jandex</artifactId>
      <version>${version.lib.jandex}</version>
    </dependency>

    <!-- Override open-api version to latest to run with Jandex and Helidon 3 -->
    <dependency>
      <groupId>io.smallrye</groupId>
      <artifactId>smallrye-open-api-core</artifactId>
      <version>${version.lib.openapi}</version>
    </dependency>
    <dependency>
      <groupId>io.smallrye</groupId>
      <artifactId>smallrye-open-api-jaxrs</artifactId>
      <version>${version.lib.openapi}</version>
    </dependency>

    <!-- test dependencies -->
    <dependency>
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter-api</artifactId>
      <version>${version.lib.junit}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter-engine</artifactId>
      <version>${version.lib.junit}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.hamcrest</groupId>
      <artifactId>hamcrest</artifactId>
      <version>${version.lib.hamcrest}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>io.rest-assured</groupId>
      <artifactId>rest-assured</artifactId>
      <version>${version.lib.rest-assured}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>com.oracle.coherence.examples.test.common</groupId>
      <artifactId>test-common</artifactId>
      <version>${project.version}</version>
      <scope>test</scope>
    </dependency>

  </dependencies>

  <build>
    <plugins>
      <plugin>
        <groupId>io.smallrye</groupId>
        <artifactId>jandex-maven-plugin</artifactId>
        <version>${version.plugin.jandex}</version>
        <executions>
          <execution>
            <id>make-index</id>
            <goals>
              <goal>jandex</goal>
            </goals>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <groupId>com.oracle.coherence.ce</groupId>
        <artifactId>pof-maven-plugin</artifactId>
        <version>${coherence.version}</version>
        <executions>
          <execution>
            <id>instrument</id>
            <goals>
              <goal>instrument</goal>
            </goals>
          </execution>
          <execution>
            <id>instrument-tests</id>
            <goals>
              <goal>instrument-tests</goal>
            </goals>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>exec-maven-plugin</artifactId>
        <version>3.2.0</version>
        <configuration>
          <executable>java</executable>
          <arguments>
            <argLine>-Djdk.serialFilter=*;!*</argLine>
            <argument>-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005</argument>
            <argument>-Dcoherence.wka=127.0.0.1</argument>
            <argument>-Dcoherence.metrics.http.enabled=true</argument>
            <argument>-classpath</argument>
            <classpath/>
            <argument>io.helidon.microprofile.cdi.Main</argument>
          </arguments>
        </configuration>
      </plugin>

      <plugin>
        <groupId>com.github.eirslett</groupId>
        <artifactId>frontend-maven-plugin</artifactId>
        <version>${frontend-maven-plugin.version}</version>
        <configuration>
          <workingDirectory>src/main/web/react</workingDirectory>
          <arguments>build</arguments>
          <nodeVersion>${node.version}</nodeVersion>
        </configuration>
        <executions>
          <execution>
            <id>install node and npm</id>
            <goals>
              <goal>install-node-and-npm</goal>
            </goals>
            <phase>generate-resources</phase>
          </execution>
          <execution>
            <id>npm install</id>
            <goals>
              <goal>npm</goal>
            </goals>
            <phase>generate-resources</phase>
            <configuration>
              <arguments>install -s</arguments>
              <npmRegistryURL>${registry.url}</npmRegistryURL>
            </configuration>
          </execution>
          <execution>
            <id>build-frontend</id>
            <goals>
              <goal>npm</goal>
            </goals>
            <phase>generate-resources</phase>
            <configuration>
              <arguments>run build</arguments>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-resources-plugin</artifactId>
        <version>3.3.1</version>
        <executions>
          <execution>
            <id>copy-frontend</id>
            <phase>generate-resources</phase>
            <goals>
              <goal>copy-resources</goal>
            </goals>
            <configuration>
              <outputDirectory>${project.build.directory}/classes/web</outputDirectory>
              <resources>
                <resource>
                  <directory>${project.basedir}/src/main/web/react/build</directory>
                  <filtering>true</filtering>
                </resource>
              </resources>
            </configuration>
          </execution>
          <execution>
            <id>copy-graphiql</id>
            <phase>generate-resources</phase>
            <goals>
              <goal>copy-resources</goal>
            </goals>
            <configuration>
              <outputDirectory>${project.build.directory}/classes/web</outputDirectory>
              <resources>
                <resource>
                  <directory>${project.basedir}/src/main/web/graphql</directory>
                  <filtering>true</filtering>
                </resource>
              </resources>
            </configuration>
          </execution>
          <execution>
            <id>copy-jet-ui</id>
            <phase>generate-resources</phase>
            <goals>
              <goal>copy-resources</goal>
            </goals>
            <configuration>
              <nonFilteredFileExtensions>
                <nonFilteredFileExtension>woff2</nonFilteredFileExtension>
              </nonFilteredFileExtensions>
              <outputDirectory>${project.build.directory}/classes/web/jet</outputDirectory>
              <resources>
                <resource>
                  <directory>${project.basedir}/src/main/web/jet/web</directory>
                  <filtering>true</filtering>
                </resource>
              </resources>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-failsafe-plugin</artifactId>
        <executions>
          <execution>
            <goals>
              <goal>integration-test</goal>
              <goal>verify</goal>
            </goals>
          </execution>
        </executions>
        <configuration>
          <argLine>-Djdk.serialFilter=;!*</argLine>
          <systemPropertyVariables>
            <coherence.metrics.http.enabled>true</coherence.metrics.http.enabled>
          </systemPropertyVariables>
        </configuration>
      </plugin>
    </plugins>
  </build>

  <profiles>
    <!--
      Creates a single architecture image (based on the build machine architecture)
      and publishes it to a local Docker daemon
    -->
    <profile>
      <id>docker</id>
      <build>
        <plugins>
          <plugin>
            <groupId>com.google.cloud.tools</groupId>
            <artifactId>jib-maven-plugin</artifactId>
            <version>${version.plugin.jib}</version>
            <configuration>
              <from>
                <image>
                  gcr.io/distroless/java17-debian11
                </image>
              </from>
              <to>
                <image>ghcr.io/coherence-community/${project.artifactId}</image>
                <tags>
                  <tag>${project.version}</tag>
                </tags>
              </to>
              <container>
                <ports>
                  <port>1408</port>
                  <port>7001</port>
                  <port>9612</port>
                </ports>
                <creationTime>USE_CURRENT_TIMESTAMP</creationTime>
              </container>
              <containerizingMode>packaged</containerizingMode>
            </configuration>
            <executions>
              <execution>
                <goals>
                  <goal>dockerBuild</goal>
                </goals>
                <phase>package</phase>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>

    <!--
      Creates a multi-architecture image for linux/amd64 and linux/arm64
      and publishes it to ghcr.io repository
    -->
    <profile>
      <id>ghcr</id>
      <build>
        <plugins>
          <plugin>
            <groupId>com.google.cloud.tools</groupId>
            <artifactId>jib-maven-plugin</artifactId>
            <version>${version.plugin.jib}</version>
            <configuration>
              <from>
                <image>
                  gcr.io/distroless/java17-debian11
                </image>
                <platforms>
                  <platform>
                    <architecture>amd64</architecture>
                    <os>linux</os>
                  </platform>
                  <platform>
                    <architecture>arm64</architecture>
                    <os>linux</os>
                  </platform>
                </platforms>
              </from>
              <to>
                <image>ghcr.io/coherence-community/${project.artifactId}</image>
                <tags>
                  <tag>${project.version}</tag>
                </tags>
              </to>
              <container>
                <ports>
                  <port>1408</port>
                  <port>7001</port>
                  <port>9612</port>
                </ports>
                <creationTime>USE_CURRENT_TIMESTAMP</creationTime>
              </container>
              <containerizingMode>packaged</containerizingMode>
            </configuration>
            <executions>
              <execution>
                <goals>
                  <goal>build</goal>
                </goals>
                <phase>package</phase>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
  </profiles>
</project>
