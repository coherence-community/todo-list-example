{"version":3,"sources":["components/Header.js","components/TodoTextInput.js","components/TodoInput.js","components/TodoItem.js","constants/TodoFilters.js","components/Footer.js","components/MainSection.js","components/App.js","actions/TodoActions.js","constants/ActionTypes.js","reducers/index.js","reducers/todos.js","serviceWorker.js","index.js"],"names":["Header","className","src","alt","Component","TodoTextInput","state","text","props","handleSubmit","e","target","value","trim","which","onSave","newTodo","setState","handleChange","handleBlur","classnames","edit","this","editing","type","placeholder","autoFocus","onBlur","onChange","onKeyDown","TodoInput","handleSave","length","addTodo","TodoItem","handleDoubleClick","id","deleteTodoRequest","updateTodoRequest","element","todo","toggleTodoRequest","description","checked","completed","onDoubleClick","onClick","SHOW_ALL","SHOW_COMPLETED","SHOW_ACTIVE","FILTER_TITLES","Footer","activeCount","itemWord","filter","title","selectedFilter","onShow","selected","style","cursor","completedCount","onClearCompleted","renderTodoCount","map","key","renderFilterLink","renderClearButton","TODO_FILTERS","MainSection","handleClearCompleted","actions","clearCompletedRequest","handleShow","todos","filteredTodos","sort","todoLhs","todoRhs","createdAt","reduce","count","renderFooter","initialized","connect","dispatch","TodoActions","updateTodo","deleteTodo","fetchAllTodos","request","get","end","err","res","console","log","body","addTodoRequest","post","send","put","delete","source","EventSource","addEventListener","JSON","parse","data","close","init","combineReducers","action","Boolean","window","location","hostname","match","loggerMiddleware","createLogger","store","createStore","reducer","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.18c23aa8.chunk.js","sourcesContent":["/*\n * Copyright (c) 2020 Oracle and/or its affiliates.\n *\n * Licensed under the Universal Permissive License v 1.0 as shown at\n * https://oss.oracle.com/licenses/upl.\n */\n\nimport React, { Component } from 'react'\n\nclass Header extends Component {\n  render() {\n    const title = \"Tasks\";\n    const image = \"todos.png\";\n\n    return (\n      <header className=\"header\">\n        <h1><img src={image} alt=\"\"/> {title}</h1>\n      </header>\n    )\n  }\n}\n\nexport default Header;\n","/*\n * Copyright (c) 2020 Oracle and/or its affiliates.\n *\n * Licensed under the Universal Permissive License v 1.0 as shown at\n * https://oss.oracle.com/licenses/upl.\n */\n\nimport React, { Component } from 'react'\nimport classnames from 'classnames'\nimport PropTypes from 'prop-types'\n\nexport default class TodoTextInput extends Component {\n  static propTypes = {\n    onSave: PropTypes.func.isRequired,\n    text: PropTypes.string,\n    placeholder: PropTypes.string,\n    editing: PropTypes.bool,\n    newTodo: PropTypes.bool\n  };\n\n  state = {\n    text: this.props.text || ''\n  };\n\n  handleSubmit = e => {\n    const text = e.target.value.trim();\n    if (e.which === 13) {\n      this.props.onSave(text);\n      if (this.props.newTodo) {\n        this.setState({ text: '' })\n      }\n    }\n  };\n\n  handleChange = e => {\n    this.setState({ text: e.target.value })\n  };\n\n  handleBlur = e => {\n    if (!this.props.newTodo) {\n      this.props.onSave(e.target.value)\n    }\n  };\n\n  render() {\n    return (\n      <input className={\n        classnames({\n          edit: this.props.editing,\n          'new-todo': this.props.newTodo\n        })}\n        type=\"text\"\n        placeholder={this.props.placeholder}\n        autoFocus=\"true\"\n        value={this.state.text}\n        onBlur={this.handleBlur}\n        onChange={this.handleChange}\n        onKeyDown={this.handleSubmit} />\n    )\n  }\n}\n","/*\n * Copyright (c) 2020 Oracle and/or its affiliates.\n *\n * Licensed under the Universal Permissive License v 1.0 as shown at\n * https://oss.oracle.com/licenses/upl.\n */\n\nimport React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport TodoTextInput from './TodoTextInput'\n\nclass TodoInput extends Component {\n  static propTypes = {\n    addTodo: PropTypes.func.isRequired\n  };\n\n  handleSave = (text) => {\n    if (text.length !== 0) {\n      this.props.addTodo(text);\n    }\n  };\n\n  render() {\n    return (\n      <TodoTextInput newTodo\n                     onSave={this.handleSave}\n                     placeholder=\"What needs to be done?\" />\n    )\n  }\n}\n\nexport default TodoInput;\n","/*\n * Copyright (c) 2020 Oracle and/or its affiliates.\n *\n * Licensed under the Universal Permissive License v 1.0 as shown at\n * https://oss.oracle.com/licenses/upl.\n */\n\nimport React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport classnames from 'classnames'\nimport TodoTextInput from './TodoTextInput'\n\nexport default class TodoItem extends Component {\n  static propTypes = {\n    todo:              PropTypes.object.isRequired,\n    updateTodoRequest: PropTypes.func.isRequired,\n    deleteTodoRequest: PropTypes.func.isRequired,\n    toggleTodoRequest: PropTypes.func.isRequired\n  };\n\n  state = {\n    editing: false\n  };\n\n  handleDoubleClick = () => {\n    this.setState({editing: true})\n  };\n\n  handleSave = (id, text) => {\n    if (text.length === 0) {\n      this.props.deleteTodoRequest(id)\n    }\n    else {\n      this.props.updateTodoRequest(id, text)\n    }\n    this.setState({editing: false})\n  };\n\n  render() {\n    const { todo, toggleTodoRequest, deleteTodoRequest } = this.props;\n\n    let element;\n    if (this.state.editing) {\n      element = (\n        <TodoTextInput text={todo.description}\n                       editing={this.state.editing}\n                       onSave={(text) => this.handleSave(todo.id, text)}/>\n      )\n    }\n    else {\n      element = (\n        <div className=\"view\">\n          <input className=\"toggle\"\n                 type=\"checkbox\"\n                 checked={todo.completed}\n                 onChange={() => toggleTodoRequest(todo.id, !todo.completed)}/>\n          <label onDoubleClick={this.handleDoubleClick}>\n            {todo.description}\n          </label>\n          <button className=\"destroy\"\n                  onClick={() => deleteTodoRequest(todo.id)}/>\n        </div>\n      )\n    }\n\n    return (\n      <li className={classnames({\n        completed: todo.completed,\n        editing: this.state.editing\n      })}>\n        {element}\n      </li>\n    )\n  }\n}\n","/*\n * Copyright (c) 2020 Oracle and/or its affiliates.\n *\n * Licensed under the Universal Permissive License v 1.0 as shown at\n * https://oss.oracle.com/licenses/upl.\n */\n\nexport const SHOW_ALL = 'show_all';\nexport const SHOW_COMPLETED = 'show_completed';\nexport const SHOW_ACTIVE = 'show_active';\n","/*\n * Copyright (c) 2020 Oracle and/or its affiliates.\n *\n * Licensed under the Universal Permissive License v 1.0 as shown at\n * https://oss.oracle.com/licenses/upl.\n */\n\nimport React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport classnames from 'classnames'\nimport { SHOW_ALL, SHOW_COMPLETED, SHOW_ACTIVE } from '../constants/TodoFilters'\n\nconst FILTER_TITLES = {\n  [SHOW_ALL]: 'All',\n  [SHOW_ACTIVE]: 'Active',\n  [SHOW_COMPLETED]: 'Completed'\n}\n\nexport default class Footer extends Component {\n  static propTypes = {\n    completedCount: PropTypes.number.isRequired,\n    activeCount: PropTypes.number.isRequired,\n    filter: PropTypes.string.isRequired,\n    onClearCompleted: PropTypes.func.isRequired,\n    onShow: PropTypes.func.isRequired\n  }\n\n  renderTodoCount() {\n    const { activeCount } = this.props\n    const itemWord = activeCount === 1 ? 'item' : 'items'\n\n    return (\n      <span className=\"todo-count\">\n        <strong>{activeCount || 'No'}</strong> {itemWord} left\n      </span>\n    )\n  }\n\n  renderFilterLink(filter) {\n    const title = FILTER_TITLES[filter]\n    const { filter: selectedFilter, onShow } = this.props\n\n    return (\n      <button className={classnames({ selected: filter === selectedFilter })}\n         style={{ cursor: 'pointer' }}\n         onClick={() => onShow(filter)}>\n        {title}\n      </button>\n    )\n  }\n\n  renderClearButton() {\n    const { completedCount, onClearCompleted } = this.props\n    if (completedCount > 0) {\n      return (\n        <button className=\"clear-completed\"\n                onClick={onClearCompleted} >\n          Clear completed\n        </button>\n      )\n    }\n  }\n\n  render() {\n    return (\n      <footer className=\"footer\">\n        {this.renderTodoCount()}\n        <ul className=\"filters\">\n          {[ SHOW_ALL, SHOW_ACTIVE, SHOW_COMPLETED ].map(filter =>\n            <li key={filter}>\n              {this.renderFilterLink(filter)}\n            </li>\n          )}\n        </ul>\n        {this.renderClearButton()}\n      </footer>\n    )\n  }\n}\n","/*\n * Copyright (c) 2020 Oracle and/or its affiliates.\n *\n * Licensed under the Universal Permissive License v 1.0 as shown at\n * https://oss.oracle.com/licenses/upl.\n */\n\nimport React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport TodoItem from './TodoItem'\nimport Footer from './Footer'\nimport { SHOW_ALL, SHOW_COMPLETED, SHOW_ACTIVE } from '../constants/TodoFilters'\n\nconst TODO_FILTERS = {\n  [SHOW_ALL]:       () => true,\n  [SHOW_ACTIVE]:    todo => !todo.completed,\n  [SHOW_COMPLETED]: todo => todo.completed\n};\n\nclass MainSection extends Component {\n  static propTypes = {\n    todos:   PropTypes.array.isRequired,\n    actions: PropTypes.object.isRequired\n  };\n\n  state = {filter: SHOW_ALL};\n\n  handleClearCompleted = () => {\n    this.props.actions.clearCompletedRequest()\n  };\n\n  handleShow = filter => {\n    this.setState({filter})\n  };\n\n  renderFooter(completedCount) {\n    const { todos } = this.props;\n    const { filter } = this.state;\n    const activeCount = todos.length - completedCount;\n\n    if (todos.length) {\n      return (\n        <Footer completedCount={completedCount}\n                activeCount={activeCount}\n                filter={filter}\n                onClearCompleted={this.handleClearCompleted}\n                onShow={this.handleShow}/>\n      )\n    }\n  }\n\n  render() {\n    const { todos, actions } = this.props;\n    const { filter } = this.state;\n\n    const filteredTodos = todos.filter(TODO_FILTERS[filter]).sort(function (todoLhs, todoRhs) {\n      return todoLhs.createdAt - todoRhs.createdAt\n    });\n    const completedCount = todos.reduce((count, todo) =>\n        todo.completed ? count + 1 : count,\n      0\n    );\n\n    return (\n      <section className=\"main\">\n        <ul className=\"todo-list\">\n          {filteredTodos.map(todo =>\n              <TodoItem key={todo.id} todo={todo} {...actions} />\n          )}\n        </ul>\n        {this.renderFooter(completedCount)}\n      </section>\n    )\n  }\n}\n\nexport default MainSection;\n","/*\n * Copyright (c) 2020 Oracle and/or its affiliates.\n *\n * Licensed under the Universal Permissive License v 1.0 as shown at\n * https://oss.oracle.com/licenses/upl.\n */\n\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\nimport * as TodoActions from '../actions/TodoActions'\nimport Header from '../components/Header'\nimport TodoInput from '../components/TodoInput'\nimport MainSection from '../components/MainSection'\n\nlet initialized = false;\n\nfunction init(actions) {\n    actions.fetchAllTodos();\n\n    // register for SSE\n    let source = new EventSource('/api/tasks/events');\n\n    source.addEventListener(\"insert\", (e) => {\n      let todo = JSON.parse(e.data);\n      actions.addTodo(todo.id, todo.createdAt, todo.description);\n    });\n\n    source.addEventListener(\"update\", (e) => {\n      let todo = JSON.parse(e.data);\n      actions.updateTodo(todo.id, todo.description, todo.completed);\n    });\n\n    source.addEventListener(\"delete\", (e) => {\n      let todo = JSON.parse(e.data);\n      actions.deleteTodo(todo.id);\n    });\n\n    source.addEventListener(\"begin\", (e) => {\n      console.log(\"listening for events from: \" + e.data);\n    });\n\n    source.addEventListener(\"end\", (e) => {\n      console.log(\"end\");\n      source.close();\n    });\n\n    initialized = true;\n}\n\nconst App = ({todos, actions}) => {\n    if (!initialized) {\n      init(actions);\n    }\n\n    return (\n        <div>\n        <Header />\n        <TodoInput addTodo={actions.addTodoRequest}/>\n        <MainSection todos={todos} actions={actions}/>\n        </div>\n    )\n};\n\nApp.propTypes = {\n  todos:   PropTypes.array.isRequired,\n  actions: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  todos: state.todos\n});\n\nconst mapDispatchToProps = dispatch => ({\n  actions: {\n    // local actions\n    addTodo:               (id, createdAt, description) => { dispatch(TodoActions.addTodo(id, createdAt, description)) },\n    updateTodo:            (id, description, completed) => {\n      dispatch(TodoActions.updateTodo(id, description));\n      dispatch(TodoActions.completeTodo(id, completed));\n    },\n    deleteTodo:            (id)              => { dispatch(TodoActions.deleteTodo(id)) },\n\n    // remote actions\n    fetchAllTodos:         ()                => { dispatch(TodoActions.fetchAllTodos()) },\n    addTodoRequest:        (description)     => { dispatch(TodoActions.addTodoRequest(description)) },\n    updateTodoRequest:     (id, description) => { dispatch(TodoActions.updateTodoRequest(id, description)) },\n    deleteTodoRequest:     (id)              => { dispatch(TodoActions.deleteTodoRequest(id)) },\n    toggleTodoRequest:     (id, completed)   => { dispatch(TodoActions.toggleTodoRequest(id, completed)) },\n    clearCompletedRequest: ()                => { dispatch(TodoActions.clearCompletedRequest()) }\n  }\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(App)\n","/*\n Copyright (c) 2020 Oracle and/or its affiliates.\n\n Licensed under the Universal Permissive License v 1.0 as shown at\n https://oss.oracle.com/licenses/upl.\n*/\nimport * as types from '../constants/ActionTypes'\nimport request from 'superagent'\n\nexport const initTodos      = (todos)                      => ({type: types.INIT_TODOS, todos});\nexport const addTodo        = (id, createdAt, description) => ({type: types.ADD_TODO, id, createdAt, description});\nexport const deleteTodo     = (id)                         => ({type: types.DELETE_TODO, id});\nexport const updateTodo     = (id, description)            => ({type: types.UPDATE_TODO, id, description});\nexport const completeTodo   = (id, completed)              => ({type: types.COMPLETE_TODO, id, completed});\nexport const clearCompleted = ()                           => ({type: types.CLEAR_COMPLETED});\n\nexport function fetchAllTodos() {\n  return (dispatch) => {\n    request\n      .get('/api/tasks')\n      .end(function (err, res) {\n        console.log(err, res);\n        if (!err) {\n          dispatch(initTodos(res.body));\n        }\n      });\n  }\n}\n\nexport function addTodoRequest(text) {\n  return (dispatch) => {\n    request\n      .post('/api/tasks')\n      .send({description: text})\n      .end(function (err, res) {\n        console.log(err, res);\n      });\n  }\n}\n\nexport function updateTodoRequest(id, text) {\n  return (dispatch) => {\n    request\n      .put('/api/tasks/' + id)\n      .send({description: text})\n      .end(function (err, res) {\n        console.log(err, res);\n      });\n  }\n}\n\nexport function toggleTodoRequest(id, completed) {\n  return (dispatch) => {\n    request\n      .put('/api/tasks/' + id)\n      .send({completed: completed})\n      .end(function (err, res) {\n        console.log(err, res);\n      });\n  }\n}\n\nexport function deleteTodoRequest(id) {\n  return (dispatch) => {\n    request\n      .delete('/api/tasks/' + id)\n      .end(function (err, res) {\n        console.log(err, res);\n      });\n  }\n}\n\nexport function clearCompletedRequest() {\n  return (dispatch) => {\n    request\n      .delete('/api/tasks')\n      .end(function (err, res) {\n        console.log(err, res);\n      });\n  }\n}\n\n","/*\n * Copyright (c) 2020 Oracle and/or its affiliates.\n *\n * Licensed under the Universal Permissive License v 1.0 as shown at\n * https://oss.oracle.com/licenses/upl.\n */\n\nexport const LOGIN = 'LOGIN';\nexport const INIT_TODOS = 'INIT_TODOS';\nexport const ADD_TODO = 'ADD_TODO';\nexport const DELETE_TODO = 'DELETE_TODO';\nexport const UPDATE_TODO = 'UPDATE_TODO';\nexport const COMPLETE_TODO = 'TOGGLE_TODO';\nexport const CLEAR_COMPLETED = 'CLEAR_COMPLETED';\n","/*\n * Copyright (c) 2020 Oracle and/or its affiliates.\n *\n * Licensed under the Universal Permissive License v 1.0 as shown at\n * https://oss.oracle.com/licenses/upl.\n */\n\nimport { combineReducers } from 'redux'\nimport todos from './todos'\n\nexport default combineReducers({todos});\n","/*\n * Copyright (c) 2020 Oracle and/or its affiliates.\n *\n * Licensed under the Universal Permissive License v 1.0 as shown at\n * https://oss.oracle.com/licenses/upl.\n */\n\nimport { INIT_TODOS, ADD_TODO, DELETE_TODO, UPDATE_TODO, COMPLETE_TODO, CLEAR_COMPLETED } from '../constants/ActionTypes'\n\nexport default function todos(state = [], action = null) {\n  switch (action.type) {\n    case INIT_TODOS:\n      return action.todos || [];\n\n    case ADD_TODO:\n      return [\n        {\n          id: action.id,\n          createdAt: action.createdAt,\n          completed: false,\n          description: action.description\n        },\n        ...state\n      ];\n\n    case DELETE_TODO:\n      return state.filter(todo =>\n        todo.id !== action.id\n      );\n\n    case UPDATE_TODO:\n      return state.map(todo =>\n        todo.id === action.id ?\n          { ...todo, description: action.description } :\n          todo\n      );\n\n    case COMPLETE_TODO:\n      return state.map(todo =>\n        todo.id === action.id ?\n          { ...todo, completed: action.completed } :\n          todo\n      );\n\n    case CLEAR_COMPLETED:\n      return state.filter(todo => todo.completed === false);\n\n    default:\n      return state;\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","/*\n * Copyright (c) 2020 Oracle and/or its affiliates.\n *\n * Licensed under the Universal Permissive License v 1.0 as shown at\n * https://oss.oracle.com/licenses/upl.\n */\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport thunkMiddleware from 'redux-thunk'\nimport { createLogger } from 'redux-logger'\nimport { createStore, applyMiddleware } from 'redux'\nimport { Provider } from 'react-redux'\nimport App from './components/App'\nimport reducer from './reducers'\nimport * as serviceWorker from './serviceWorker';\n\nconst loggerMiddleware = createLogger();\n\nconst store = createStore(\n  reducer,\n  applyMiddleware(\n    thunkMiddleware, // lets us dispatch() functions\n    loggerMiddleware // neat middleware that logs actions\n  )\n);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}