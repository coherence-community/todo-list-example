<?xml version="1.0" encoding="UTF-8"?>
<!--
  Copyright (c) 2021, 2025, Oracle and/or its affiliates.
  Licensed under the Universal Permissive License v 1.0 as shown at
  https://oss.oracle.com/licenses/upl.
-->

<project xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns="http://maven.apache.org/POM/4.0.0"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <parent>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-parent</artifactId>
    <version>3.4.2</version>
    <relativePath/> <!-- lookup parent from repository -->
  </parent>

  <groupId>com.oracle.coherence.examples</groupId>
  <artifactId>todo-list-spring-server</artifactId>
  <version>24.09.3</version>

  <name>todo-list-spring-server</name>
  <description>Demo project for Spring Boot</description>

  <properties>
    <java.version>21</java.version>
    <maven.minimum.version>3.6.0</maven.minimum.version>

    <!-- Dependencies -->

    <coherence.groupId>com.oracle.coherence.ce</coherence.groupId>
    <coherence.version>${project.version}</coherence.version>
    <coherence-spring.version>4.3.0</coherence-spring.version>
    <graphql-java-datetime.version>4.1.0</graphql-java-datetime.version>
    <graphql-java-extended-scalars.version>22.0</graphql-java-extended-scalars.version>
    <guava.version>33.4.0-jre</guava.version>
    <logback.version>1.5.16</logback.version>
    <netty.version>4.1.117.Final</netty.version>

    <!-- Plugins -->
    <plugin.exec.version>3.5.0</plugin.exec.version>
    <plugin.jandex.version>3.2.3</plugin.jandex.version>
    <jib-maven-plugin.version>3.4.4</jib-maven-plugin.version>
    <frontend-maven-plugin.version>1.15.1</frontend-maven-plugin.version>
    <maven-surefire-plugin.version>3.5.2</maven-surefire-plugin.version>
    <node.version>v14.17.6</node.version>
    <registry.url>https://registry.npmjs.org</registry.url>
  </properties>

  <dependencyManagement>
    <dependencies>
      <dependency>
        <groupId>io.opentelemetry.instrumentation</groupId>
        <artifactId>opentelemetry-instrumentation-bom</artifactId>
        <version>2.12.0</version>
        <type>pom</type>
        <scope>import</scope>
      </dependency>
      <dependency>
        <groupId>io.opentelemetry</groupId>
        <artifactId>opentelemetry-bom</artifactId>
        <version>1.46.0</version>
        <type>pom</type>
        <scope>import</scope>
      </dependency>
    </dependencies>
  </dependencyManagement>

  <dependencies>
    <dependency>
      <groupId>ch.qos.logback</groupId>
      <artifactId>logback-core</artifactId>
      <version>${logback.version}</version>
    </dependency>
    <dependency>
      <groupId>ch.qos.logback</groupId>
      <artifactId>logback-classic</artifactId>
      <version>${logback.version}</version>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-web</artifactId>
    </dependency>
    <dependency>
      <groupId>com.google.protobuf</groupId>
      <artifactId>protobuf-java</artifactId>
      <version>4.29.3</version>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-test</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>com.oracle.coherence.spring</groupId>
      <artifactId>coherence-spring-boot-starter</artifactId>
      <version>${coherence-spring.version}</version>
    </dependency>
    <dependency>
      <groupId>com.oracle.coherence.spring</groupId>
      <artifactId>coherence-spring-data</artifactId>
      <version>${coherence-spring.version}</version>
    </dependency>
    <dependency>
      <groupId>${coherence.groupId}</groupId>
      <artifactId>coherence-grpc-proxy</artifactId>
      <version>${coherence.version}</version>
    </dependency>
    <dependency>
      <groupId>${coherence.groupId}</groupId>
      <artifactId>coherence-json</artifactId>
      <version>${coherence.version}</version>
    </dependency>

    <!-- Guava -->
    <dependency>
      <artifactId>guava</artifactId>
      <groupId>com.google.guava</groupId>
      <version>${guava.version}</version>
    </dependency>

    <!-- GraphLQ -->
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-graphql</artifactId>
    </dependency>
    <dependency>
      <groupId>com.graphql-java</groupId>
      <artifactId>graphql-java-extended-scalars</artifactId>
      <version>${graphql-java-extended-scalars.version}</version>
    </dependency>
    <dependency>
      <groupId>com.zhokhov.graphql</groupId>
      <artifactId>graphql-java-datetime</artifactId>
      <version>${graphql-java-datetime.version}</version>
    </dependency>
    <dependency>
      <groupId>jakarta.annotation</groupId>
      <artifactId>jakarta.annotation-api</artifactId>
      <version>3.0.0</version>
    </dependency>
    <dependency>
      <groupId>org.glassfish</groupId>
      <artifactId>jakarta.json</artifactId>
      <version>2.0.1</version>
    </dependency>
    <dependency>
      <groupId>jakarta.json.bind</groupId>
      <artifactId>jakarta.json.bind-api</artifactId>
      <version>3.0.1</version>
    </dependency>
    <dependency>
      <groupId>io.micrometer</groupId>
      <artifactId>micrometer-core</artifactId>
    </dependency>

    <!-- tracing -->
    <dependency>
      <groupId>io.opentelemetry</groupId>
      <artifactId>opentelemetry-api</artifactId>
    </dependency>
    <dependency>
      <groupId>io.opentelemetry.instrumentation</groupId>
      <artifactId>opentelemetry-spring-boot-starter</artifactId>
    </dependency>
    <dependency>
      <groupId>io.opentelemetry</groupId>
      <artifactId>opentelemetry-api-events</artifactId>
      <version>1.36.0-alpha</version>
    </dependency>

    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-webflux</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>com.oracle.coherence.examples.test.common</groupId>
      <artifactId>test-common</artifactId>
      <version>${project.version}</version>
      <scope>test</scope>
    </dependency>

    <!-- netty-common override -->
    <dependency>
      <artifactId>netty-common</artifactId>
      <groupId>io.netty</groupId>
      <version>${netty.version}</version>
    </dependency>
  </dependencies>

  <build>
    <plugins>
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>exec-maven-plugin</artifactId>
        <version>${plugin.exec.version}</version>
        <configuration>
          <executable>java</executable>
          <arguments>
            <argument>-Dcoherence.metrics.http.enabled=true</argument>
            <argument>-classpath</argument>
            <classpath/>
            <argument>
              com.oracle.coherence.examples.todo.server.TodoListSpringServerApplication
            </argument>
          </arguments>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-enforcer-plugin</artifactId>
        <executions>
          <execution>
            <id>enforce-plugin-versions</id>
            <goals>
              <goal>enforce</goal>
            </goals>
            <configuration>
              <rules>
                <requireMavenVersion>
                  <version>${maven.minimum.version}</version>
                </requireMavenVersion>
                <requireJavaVersion>
                  <version>${java.version}</version>
                </requireJavaVersion>
              </rules>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-maven-plugin</artifactId>
      </plugin>
      <plugin>
        <groupId>com.github.eirslett</groupId>
        <artifactId>frontend-maven-plugin</artifactId>
        <version>${frontend-maven-plugin.version}</version>
        <configuration>
          <workingDirectory>src/main/web/react</workingDirectory>
          <arguments>build</arguments>
          <nodeVersion>${node.version}</nodeVersion>
        </configuration>
        <executions>
          <execution>
            <id>install node and npm</id>
            <goals>
              <goal>install-node-and-npm</goal>
            </goals>
            <phase>generate-resources</phase>
          </execution>
          <execution>
            <id>npm install</id>
            <goals>
              <goal>npm</goal>
            </goals>
            <phase>generate-resources</phase>
            <configuration>
              <arguments>install -s</arguments>
              <npmRegistryURL>${registry.url}</npmRegistryURL>
            </configuration>
          </execution>
          <execution>
            <id>build-frontend</id>
            <goals>
              <goal>npm</goal>
            </goals>
            <phase>generate-resources</phase>
            <configuration>
              <arguments>run build</arguments>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-resources-plugin</artifactId>
        <executions>
          <execution>
            <id>copy-frontend</id>
            <phase>generate-resources</phase>
            <goals>
              <goal>copy-resources</goal>
            </goals>
            <configuration>
              <outputDirectory>
                ${project.build.directory}/classes/static
              </outputDirectory>
              <resources>
                <resource>
                  <directory>
                    ${project.basedir}/src/main/web/react/build
                  </directory>
                  <filtering>true</filtering>
                </resource>
              </resources>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-surefire-plugin</artifactId>
          <version>${maven-surefire-plugin.version}</version>
          <configuration>
            <systemPropertyVariables>
              <coherence.wka>127.0.0.1</coherence.wka>
              <otel.sdk.disabled>true</otel.sdk.disabled>
            </systemPropertyVariables>
            <includes>
                <include>**/*FunctionalTest.java</include>
                <include>**/*Test.java</include>
                <include>**/*Tests.java</include>
            </includes>
            <forkCount>1</forkCount>
            <reuseForks>false</reuseForks>
            <useSystemClassLoader>true</useSystemClassLoader>
            <useManifestOnlyJar>false</useManifestOnlyJar>
          </configuration>
      </plugin>
      <plugin>
        <groupId>com.oracle.coherence.ce</groupId>
        <artifactId>pof-maven-plugin</artifactId>
        <version>${coherence.version}</version>
        <executions>
          <execution>
            <id>instrument</id>
            <goals>
              <goal>instrument</goal>
            </goals>
          </execution>
          <execution>
            <id>instrument-tests</id>
            <goals>
              <goal>instrument-tests</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>io.smallrye</groupId>
        <artifactId>jandex-maven-plugin</artifactId>
        <version>${plugin.jandex.version}</version>
        <executions>
          <execution>
            <id>make-index</id>
            <goals>
              <goal>jandex</goal>
            </goals>
            <phase>process-classes</phase>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>

  <profiles>
    <!--
      Creates a single architecture image (based on the build machine architecture)
      and publishes it to a local Docker daemon
    -->
    <profile>
      <id>docker</id>
      <build>
        <plugins>
          <plugin>
            <groupId>com.google.cloud.tools</groupId>
            <artifactId>jib-maven-plugin</artifactId>
            <version>${jib-maven-plugin.version}</version>
            <configuration>
              <from>
                <image>
                  gcr.io/distroless/java21-debian12
                </image>
              </from>
              <to>
                <image>ghcr.io/coherence-community/${project.artifactId}</image>
                <tags>
                  <tag>${project.version}</tag>
                </tags>
              </to>
              <container>
                <ports>
                  <port>1408</port>
                  <port>7001</port>
                  <port>9612</port>
                </ports>
                <creationTime>USE_CURRENT_TIMESTAMP</creationTime>
              </container>
              <containerizingMode>packaged</containerizingMode>
            </configuration>
            <executions>
              <execution>
                <goals>
                  <goal>dockerBuild</goal>
                </goals>
                <phase>package</phase>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>

    <!--
      Creates a multi-architecture image for linux/amd64 and linux/arm64
      and publishes it to ghcr.io repository
    -->
    <profile>
      <id>ghcr</id>
      <build>
        <plugins>
          <plugin>
            <groupId>com.google.cloud.tools</groupId>
            <artifactId>jib-maven-plugin</artifactId>
            <version>${jib-maven-plugin.version}</version>
            <configuration>
              <from>
                <image>
                  gcr.io/distroless/java21-debian12
                </image>
                <platforms>
                  <platform>
                    <architecture>amd64</architecture>
                    <os>linux</os>
                  </platform>
                  <platform>
                    <architecture>arm64</architecture>
                    <os>linux</os>
                  </platform>
                </platforms>
              </from>
              <to>
                <image>ghcr.io/coherence-community/${project.artifactId}</image>
                <tags>
                  <tag>${project.version}</tag>
                </tags>
              </to>
              <container>
                <ports>
                  <port>1408</port>
                  <port>7001</port>
                  <port>9612</port>
                </ports>
                <creationTime>USE_CURRENT_TIMESTAMP</creationTime>
              </container>
              <containerizingMode>packaged</containerizingMode>
            </configuration>
            <executions>
              <execution>
                <goals>
                  <goal>build</goal>
                </goals>
                <phase>package</phase>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
  </profiles>

  <repositories>
    <repository>
      <id>central</id>
      <url>https://repo.maven.apache.org/maven2</url>
    </repository>
    <repository>
      <id>sonatype-snapshots</id>
      <url>https://oss.sonatype.org/content/repositories/snapshots</url>
      <releases>
        <enabled>false</enabled>
      </releases>
      <snapshots>
        <enabled>true</enabled>
      </snapshots>
    </repository>
    <repository>
      <id>spring.io</id>
      <url>https://repo.spring.io/plugins-release/</url>
    </repository>
    <repository>
      <id>sonatype-staging</id>
      <url>https://oss.sonatype.org/content/groups/staging/</url>
      <releases>
        <enabled>true</enabled>
      </releases>
      <snapshots>
        <enabled>false</enabled>
      </snapshots>
    </repository>
    <repository>
      <id>jcenter.bintray.com</id>
      <url>https://jcenter.bintray.com</url>
    </repository>
  </repositories>

  <pluginRepositories>
    <pluginRepository>
      <id>central</id>
      <url>https://repo.maven.apache.org/maven2</url>
    </pluginRepository>
    <pluginRepository>
      <id>sonatype-snapshots</id>
      <url>https://oss.sonatype.org/content/repositories/snapshots</url>
      <releases>
        <enabled>false</enabled>
      </releases>
      <snapshots>
        <enabled>true</enabled>
      </snapshots>
    </pluginRepository>
    <pluginRepository>
      <id>sonatype-staging</id>
      <url>https://oss.sonatype.org/content/groups/staging/</url>
      <releases>
        <enabled>true</enabled>
      </releases>
      <snapshots>
        <enabled>false</enabled>
      </snapshots>
    </pluginRepository>
    <pluginRepository>
      <id>jcenter.bintray.com</id>
      <url>https://jcenter.bintray.com</url>
    </pluginRepository>
  </pluginRepositories>

</project>
